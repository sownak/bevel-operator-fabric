(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{129:function(e,n,r){"use strict";r.d(n,"a",(function(){return b})),r.d(n,"b",(function(){return f}));var t=r(0),a=r.n(t);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function c(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?c(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=a.a.createContext({}),p=function(e){var n=a.a.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},b=function(e){var n=p(e.components);return a.a.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),b=p(r),d=t,f=b["".concat(c,".").concat(d)]||b[d]||s[d]||o;return r?a.a.createElement(f,i(i({ref:n},u),{},{components:r})):a.a.createElement(f,i({ref:n},u))}));function f(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=r.length,c=new Array(o);c[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:t,c[1]=i;for(var u=2;u<o;u++)c[u]=r[u];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},64:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return i})),r.d(n,"metadata",(function(){return l})),r.d(n,"toc",(function(){return u})),r.d(n,"default",(function(){return b}));var t=r(3),a=r(7),o=(r(0),r(129)),c=["components"],i={id:"create-channel",title:"Create channel"},l={unversionedId:"user-guide/create-channel",id:"user-guide/create-channel",isDocsHomePage:!1,title:"Create channel",description:"As a pre requisite, you need to have:",source:"@site/docs/user-guide/create-channel.mdx",slug:"/user-guide/create-channel",permalink:"/bevel-operator-fabric/docs/user-guide/create-channel",editUrl:"https://github.com/hyperledger/bevel-operator-fabric/edit/master/website/docs/user-guide/create-channel.mdx",version:"current",sidebar:"someSidebar1",previous:{title:"Using network config in the kubernetes cluster",permalink:"/bevel-operator-fabric/docs/user-guide/network-config-kubernetes"},next:{title:"Install Chaincode",permalink:"/bevel-operator-fabric/docs/user-guide/install-chaincode"}},u=[{value:"Generate the config channel block",id:"generate-the-config-channel-block",children:[]},{value:"Join orderer to channel",id:"join-orderer-to-channel",children:[]},{value:"Join peer to the channel",id:"join-peer-to-the-channel",children:[]}],p={toc:u};function b(e){var n=e.components,r=Object(a.a)(e,c);return Object(o.b)("wrapper",Object(t.a)({},p,r,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"As a pre requisite, you need to have:\n","[x]"," a running ordering service\n","[x]"," a running peer network\n","[x]"," a network configuration file, see this ",Object(o.b)("a",{parentName:"p",href:"/bevel-operator-fabric/docs/user-guide/network-config"},"link")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The ordering service must be configured with channel participation API enabled")),Object(o.b)("p",null,"Prepare the parameters:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"CHANNEL_NAME=demo\n")),Object(o.b)("h2",{id:"generate-the-config-channel-block"},"Generate the config channel block"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf channel generate --output=demo.block \\\n    --name=demo --organizations Org1MSP --ordererOrganizations OrdererMSP\n")),Object(o.b)("h2",{id:"join-orderer-to-channel"},"Join orderer to channel"),Object(o.b)("p",null,"If you haven't generated the org1.yaml, ",Object(o.b)("a",{parentName:"p",href:"./network-config"},"please visit this page to generate it")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf ordnode join --block=demo.block --name=ordservice \\\n    --namespace=default --identity=admin-tls-ordservice.yaml\n")),Object(o.b)("h2",{id:"join-peer-to-the-channel"},"Join peer to the channel"),Object(o.b)("p",null,"If you haven't generated the org1.yaml, ",Object(o.b)("a",{parentName:"p",href:"./network-config"},"please visit this page to generate it")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf channel join --name=demo --config=org1.yaml \\\n    --user=admin -p=org1-peer0.default\n")))}b.isMDXComponent=!0}}]);