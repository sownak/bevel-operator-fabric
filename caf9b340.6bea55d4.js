(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{116:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return o})),r.d(n,"metadata",(function(){return i})),r.d(n,"toc",(function(){return d})),r.d(n,"default",(function(){return p}));var t=r(3),a=r(7),l=(r(0),r(129)),c=["components"],o={id:"getting-started",title:"Getting started"},i={unversionedId:"channel-management/getting-started",id:"channel-management/getting-started",isDocsHomePage:!1,title:"Getting started",description:"There are two types of resources to manage a channel:",source:"@site/docs/channel-management/getting-started.md",slug:"/channel-management/getting-started",permalink:"/bevel-operator-fabric/docs/channel-management/getting-started",editUrl:"https://github.com/hyperledger/bevel-operator-fabric/edit/master/website/docs/channel-management/getting-started.md",version:"current",sidebar:"someSidebar1",previous:{title:"Kubernetes chaincode builder",permalink:"/bevel-operator-fabric/docs/chaincode-deployment/k8s-builder"},next:{title:"Manage the channel",permalink:"/bevel-operator-fabric/docs/channel-management/manage"}},d=[{value:"FabricMainChannel",id:"fabricmainchannel",children:[]},{value:"FabricFollowerChannel",id:"fabricfollowerchannel",children:[]},{value:"Wallet",id:"wallet",children:[]},{value:"Enroll the orderer admin organization",id:"enroll-the-orderer-admin-organization",children:[]},{value:"Enroll the admin peer organization",id:"enroll-the-admin-peer-organization",children:[]},{value:"Create secret",id:"create-secret",children:[]},{value:"Create the channel",id:"create-the-channel",children:[]},{value:"Join the channel for Org1MSP",id:"join-the-channel-for-org1msp",children:[]}],s={toc:d};function p(e){var n=e.components,r=Object(a.a)(e,c);return Object(l.b)("wrapper",Object(t.a)({},s,r,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"There are two types of resources to manage a channel:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"FabricMainChannel"),Object(l.b)("li",{parentName:"ul"},"FabricFollowerChannel")),Object(l.b)("h3",{id:"fabricmainchannel"},"FabricMainChannel"),Object(l.b)("p",null,"This resource creates and manages the channel configuration, including:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Configuration"),Object(l.b)("li",{parentName:"ul"},"Peer organizations"),Object(l.b)("li",{parentName:"ul"},"Orderer organizations")),Object(l.b)("h3",{id:"fabricfollowerchannel"},"FabricFollowerChannel"),Object(l.b)("p",null,"This resource joins the channel and manages the channel configuration, including:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Anchor peers"),Object(l.b)("li",{parentName:"ul"},"Peers to join")),Object(l.b)("h3",{id:"wallet"},"Wallet"),Object(l.b)("p",null,"For every resource we need a wallet to interact with the network."),Object(l.b)("p",null,"The FabricMainChannel requires a wallet with the admin identity of the orderer organization and the peer organizations that will manage the channel."),Object(l.b)("p",null,"The FabricFollowerChannel requires a wallet with the admin identity of the peer organization."),Object(l.b)("h2",{id:"enroll-the-orderer-admin-organization"},"Enroll the orderer admin organization"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"CA_NAME=ord-ca\nCA_NAMESPACE=default\nCA_MSPID=OrdererMSP\nCA_TYPE=tlsca # can be `ca` or `tlsca`\nkubectl hlf ca register --name=$CA_NAME --namespace=$CA_NAMESPACE --user=admin --secret=adminpw --type=admin \\\n --enroll-id enroll --enroll-secret=enrollpw --mspid OrdererMSP\n\nkubectl hlf ca enroll --name=$CA_NAME --namespace=$CA_NAMESPACE \\\n    --user=admin --secret=adminpw --mspid $CA_MSPID \\\n    --ca-name $CA_TYPE  --output orderermsp.yaml\n")),Object(l.b)("h2",{id:"enroll-the-admin-peer-organization"},"Enroll the admin peer organization"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"CA_NAME=org1-ca\nCA_NAMESPACE=default\nCA_MSPID=Org1MSP\nCA_TYPE=ca # can be `ca` or `tlsca`\nkubectl hlf ca register --name=$CA_NAME --namespace=$CA_NAMESPACE --user=admin --secret=adminpw --type=admin \\\n --enroll-id enroll --enroll-secret=enrollpw --mspid Org1MSP\n\nkubectl hlf ca enroll --name=$CA_NAME --namespace=$CA_NAMESPACE \\\n    --user=admin --secret=adminpw --mspid $CA_MSPID \\\n    --ca-name $CA_TYPE  --output org1msp.yaml\n")),Object(l.b)("h2",{id:"create-secret"},"Create secret"),Object(l.b)("p",null,"We need to create a secret for the operator to use the certificates to create the channel and update the channel configuration."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl create secret generic wallet --namespace=default \\\n        --from-file=org1msp.yaml=$PWD/org1msp.yaml \\\n        --from-file=orderermsp.yaml=$PWD/orderermsp.yaml\n")),Object(l.b)("h2",{id:"create-the-channel"},"Create the channel"),Object(l.b)("p",null,"First, we need to obtain the orderer TLS certificate, this would need to be performed for each orderer that is in the consenters list."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl get fabricorderernodes ord-node1 \\\n    -o jsonpath='{.status.tlsCert}' > ./orderer-cert.pem\n")),Object(l.b)("p",null,"Second, we create the main channel CRD and apply it."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},'kubectl hlf channelcrd main create \\\n    --channel-name=demo \\\n    --name=demo \\\n    --orderer-orgs=OrdererMSP \\\n    --peer-orgs=Org1MSP \\\n    --admin-orderer-orgs=OrdererMSP \\\n    --admin-peer-orgs=Org1MSP \\\n    --secret-name=wallet \\\n    --secret-ns=default \\\n    --consenters=ord-node1.default:7050 \\\n    --consenter-certificates=./orderer-cert.pem \\\n    --identities="OrdererMSP;admin-tls-ordservice.yaml" \\\n    --identities="Org1MSP;peer-org1.yaml" \\\n    --consenters=ord-node1.default:7050 --consenter-certificates="orderer0-tls-cert.pem"\n\n')),Object(l.b)("h2",{id:"join-the-channel-for-org1msp"},"Join the channel for Org1MSP"),Object(l.b)("p",null,"First, we need to obtain the orderer TLS certificate, this would need to be performed for each orderer that is in the consenters list."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"kubectl get fabricorderernodes ord-node1 \\\n    -o jsonpath='{.status.tlsCert}' > ./orderer-cert.pem\n")),Object(l.b)("p",null,"Second, we create the main channel CRD and apply it."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},'kubectl hlf channelcrd follower create \\\n    --channel-name=demo \\\n    --mspid=Org1MSP \\\n    --name="demo-org1msp" \\\n    --orderer-certificates="./orderer-cert.pem" \\\n    --orderer-urls="grpcs://ord-node1.default:7050" \\\n    --anchor-peers="org1-peer0:7051" \\\n    --peers="org1-peer0.default" \\\n    --secret-name=wallet \\\n    --secret-ns=default \\\n    --secret-key="peer-org1.yaml"\n')))}p.isMDXComponent=!0},129:function(e,n,r){"use strict";r.d(n,"a",(function(){return p})),r.d(n,"b",(function(){return u}));var t=r(0),a=r.n(t);function l(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function c(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?c(Object(r),!0).forEach((function(n){l(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=a.a.createContext({}),s=function(e){var n=a.a.useContext(d),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},p=function(e){var n=s(e.components);return a.a.createElement(d.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},m=a.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,l=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=s(r),m=t,u=p["".concat(c,".").concat(m)]||p[m]||b[m]||l;return r?a.a.createElement(u,o(o({ref:n},d),{},{components:r})):a.a.createElement(u,o({ref:n},d))}));function u(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var l=r.length,c=new Array(l);c[0]=m;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o.mdxType="string"==typeof e?e:t,c[1]=o;for(var d=2;d<l;d++)c[d]=r[d];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"}}]);