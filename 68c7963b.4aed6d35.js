(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{129:function(e,n,r){"use strict";r.d(n,"a",(function(){return d})),r.d(n,"b",(function(){return f}));var t=r(0),o=r.n(t);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=o.a.createContext({}),u=function(e){var n=o.a.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},d=function(e){var n=u(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},g=o.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(r),g=t,f=d["".concat(i,".").concat(g)]||d[g]||p[g]||a;return r?o.a.createElement(f,c(c({ref:n},s),{},{components:r})):o.a.createElement(f,c({ref:n},s))}));function f(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=r.length,i=new Array(a);i[0]=g;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:t,i[1]=c;for(var s=2;s<a;s++)i[s]=r[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}g.displayName="MDXCreateElement"},92:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return c})),r.d(n,"metadata",(function(){return l})),r.d(n,"toc",(function(){return s})),r.d(n,"default",(function(){return d}));var t=r(3),o=r(7),a=(r(0),r(129)),i=["components"],c={id:"network-config",title:"Get a network config"},l={unversionedId:"user-guide/network-config",id:"user-guide/network-config",isDocsHomePage:!1,title:"Get a network config",description:"Generating a network config is one of the most common operations once you have a network up and running.",source:"@site/docs/user-guide/network-config.md",slug:"/user-guide/network-config",permalink:"/bevel-operator-fabric/docs/user-guide/network-config",editUrl:"https://github.com/hyperledger/bevel-operator-fabric/edit/master/website/docs/user-guide/network-config.md",version:"current",sidebar:"someSidebar1",previous:{title:"Automatic renewal of certificates",permalink:"/bevel-operator-fabric/docs/operator-guide/auto-renew-certificates"},next:{title:"Using network config in the kubernetes cluster",permalink:"/bevel-operator-fabric/docs/user-guide/network-config-kubernetes"}},s=[{value:"Using CRDs",id:"using-crds",children:[]},{value:"Using the CLI",id:"using-the-cli",children:[{value:"Generate network config",id:"generate-network-config",children:[]},{value:"Setup env variables",id:"setup-env-variables",children:[]},{value:"Register a user",id:"register-a-user",children:[]},{value:"Enroll a user",id:"enroll-a-user",children:[]},{value:"Utility: add user to network config",id:"utility-add-user-to-network-config",children:[]}]}],u={toc:s};function d(e){var n=e.components,r=Object(o.a)(e,i);return Object(a.b)("wrapper",Object(t.a)({},u,r,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Generating a network config is one of the most common operations once you have a network up and running."),Object(a.b)("h2",{id:"using-crds"},"Using CRDs"),Object(a.b)("p",null,"This is the simplest way to get a network config. You can  get a network config with the following command:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: hlf.kungfusoftware.es/v1alpha1\nkind: FabricNetworkConfig\nmetadata:\n  name: network-config\nspec:\n  # channel to include in the network config\n  channels:\n    - demo\n  # identities to include in the network config\n  identities:\n    - name: <identity_name>\n      namespace: <identity_namespace>\n  internal: false\n  # namespace for the peers and orderers to include in the network config\n  namespaces:\n    - default\n    - hlf\n  organization: ''\n  # organizations to include in the network config\n  organizations:\n    - OrdererMSP\n    - Org1MSP\n    - Org2MSP\n  # output secret name for the network config\n  secretName: network-config\n")),Object(a.b)("p",null,"The network config controller will be watching for changes in the network config CRD and will generate a network config secret with the name specified in the ",Object(a.b)("inlineCode",{parentName:"p"},"secretName")," field. The secret will contain a ",Object(a.b)("inlineCode",{parentName:"p"},"config.yaml")," file with the network config. If the identities are renewed, the network config will be updated automatically."),Object(a.b)("h2",{id:"using-the-cli"},"Using the CLI"),Object(a.b)("h3",{id:"generate-network-config"},"Generate network config"),Object(a.b)("p",null,"You can get a network config with the following command:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf inspect --output networkConfig.yaml -o OrdererMSP -o Org1MSP\n")),Object(a.b)("p",null,"Network config will look like this:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-yaml"},'name: hlf-network\nversion: 1.0.0\nclient:\n  organization: ""\n... rest of your network config ...\n')),Object(a.b)("p",null,"In order to have users in your network, first you need to register and enroll them:"),Object(a.b)("h3",{id:"setup-env-variables"},"Setup env variables"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"CA_NAME=ca-org1\nCA_NAMESPACE=default\nMSP_ID=Org1MSP\n\nUSER_NAME=admin\nUSER_PWD=adminpw\nUSER_TYPE=admin # it can be client, admin, peer, orderer\nENROLL_USER=enroll # username of the enroll user of the CA\nENROLL_PWD=enrollpw # username of the enroll password of the CA\n\nUSER_CA_TYPE=ca # it can be ca, tlsca\n")),Object(a.b)("h3",{id:"register-a-user"},"Register a user"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf ca register --name=$CA_NAME \\\n --namespace=$CA_NAMESPACE --mspid=$MSP_ID \\\n --user=$USER_NAME --secret=$USER_PWD --type=$USER_TYPE \\\n --enroll-id=$ENROLL_USER --enroll-secret=$ENROLL_PWD\n")),Object(a.b)("p",null,"If it has been already registered, the following error will appear"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-log"},"Error: failed to register user: failed to register user: Response from server: Error Code: 74 - Identity 'admin' is already registered\n")),Object(a.b)("h3",{id:"enroll-a-user"},"Enroll a user"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf ca enroll --name=$CA_NAME --namespace=$CA_NAMESPACE \\\n    --user=$USER_NAME --secret=$USER_PWD --mspid $MSP_ID \\\n    --ca-name=$USER_CA_TYPE  --output user.yaml\n")),Object(a.b)("h3",{id:"utility-add-user-to-network-config"},"Utility: add user to network config"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"kubectl hlf inspect --output org1.yaml -o Org1MSP -o OrdererMSP\n\n## add user key and cert to org1.yaml from peer-org1.yaml\n\nkubectl hlf utils adduser --userPath=user.yaml \\\n  --config=org1.yaml --username=admin --mspid=$MSP_ID\n")))}d.isMDXComponent=!0}}]);